#ifndef CORO_STATES_H
#define CORO_STATES_H

/* supported methods to load state table */
typedef enum
{
    ST_SOURCE_FILE, /* from separate file, generated by modified libcoro */
    ST_SOURCE_COREDUMP /* directly from address space in the core file */
} st_source_t;

typedef unsigned long addr_t;

typedef struct state_table_entry
{
    addr_t sp;
    addr_t pc;
    addr_t fp;
} ste_t;

#define ST_HANDLE_SIZE 32
typedef struct
{
    char opaque[ST_HANDLE_SIZE];
} state_table_t;

typedef enum
{
    ST_ENTRY_PRESENT = 1,
    ST_SUCCESS = 0,
    ST_ERROR = -1,
    ST_EOF = -2
} st_result_t;

st_result_t open_state_table(state_table_t *handle,
                             const char* filepath, st_source_t source);

void close_state_table(state_table_t *handle);

/* Get next entry from the state table.
 * Returns positive value if entry is found, 0 otherwise */
int st_next_entry(state_table_t *handle, ste_t *entry);


/******************** Error handling ********************/
enum {
    ST_ERROR_OPEN_FILE,
    ST_ERROR_INVALID_ARGUMENTS
}; 

extern int st_errno;
const char *st_strerror(int st_errno);

#endif /* CORO_STATES_H */
